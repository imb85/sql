#include <stdio.h>
#include <string.h>
#include <sqlca.h>
#include <stdlib.h>
#include <sqlda.h>
#include <sqlcpr.h>

#define STR_LEN 25 
 
typedef char asciiz[STR_LEN]; 

EXEC SQL TYPE asciiz IS CHARZ(STR_LEN) REFERENCE; 

asciiz username; 
asciiz password; 

struct customer {
	int customer_no;
	asciiz fname;
	asciiz lname;
	int house_no;
	asciiz street;
	asciiz city;
	asciiz state;
	asciiz phone;
	asciiz email;
};

struct vehicle {
	int customer_no;
	asciiz vin;
	int year;
	asciiz make;
	asciiz model;
	asciiz trim;
};

struct payment {
	int customer_no;
	int payment_no;
	asciiz card_no;
	asciiz ccv;
	asciiz exp;
};


struct order {
	int order_no;
	asciiz vin;
	int start_date;
	int end_date;
	int employee_no;
};

struct invoice {
	int invoice_no;
	int customer_no;
	asciiz vin;
	int order_no;
	int employee_no;
	int odometer_in;
	int odometer_out;
	asciiz status;
	int balance;
	int date_printed;
	int date_paid;
};

struct employee {
	int employee_no;
	asciiz fname;
	asciiz lname;
	asciiz position;
	asciiz phone;
};

struct note {
	int note_no;
	int order_no;
	asciiz description;
};

struct item {
	int item_no;
	int order_no;
	int procedure_no;
	asciiz description;
	int cost;
};

struct procedure {
	int procedure_no;
	int order_no;
	asciiz description;
	int cost;
};

void sql_error(char * msg){ 
	char err_msg[512];
	size_t buf_len, msg_len;

	EXEC SQL WHENEVER SQLERROR CONTINUE;

	printf("\n%s\n", msg);

	buf_len = sizeof(err_msg);
	sqlglm(err_msg, &buf_len, &msg_len);
	printf("%.*s\n", msg_len, err_msg);

	EXEC SQL ROLLBACK RELEASE;
	exit(EXIT_FAILURE);
} 

void main_menu(){
	printf("Select an option to query the database:\n");
	printf(" 0. Exit the program\n");
	printf(" 1. Add customer\n");
	printf(" 2. Delete employee\n");
	printf(" 3. Update order description\n");
	printf(" 4. Show a vehicle's orders\n");
	printf(" 5. Show items for an invoice given an order\n");
	printf(" 6. Show orders completed June 2005 to December 2005\n");
	printf(" 7. Show items for a procedure\n");
	printf(" 8. Show number of proceudres for an order\n");
	printf(" 9. Show employee with higher than average number of invoices\n");
	printf("10. Invoice information\n");
}

// Query 1
// Completed
void add_customer(){
	struct customer new_customer;

	printf("Enter customer_no >> ");
	scanf("%d", &new_customer.customer_no);
	printf("Enter fname >> ");
	scanf("%s", &new_customer.fname);
	printf("Enter lname >> ");
	scanf("%s", &new_customer.lname);
	printf("Enter house_no >> ");
	scanf("%d", &new_customer.house_no);
	printf("Enter street >> ");
	scanf("%s", &new_customer.street);
	printf("Enter city >> ");
	scanf("%s", &new_customer.city);
	printf("Enter state >> ");
	scanf("%s", &new_customer.state);
	printf("Enter phone >> ");
	scanf("%s", &new_customer.phone);
	printf("Enter email >> ");
	scanf("%s", &new_customer.email);

	EXEC SQL INSERT INTO  Customers (customer_no, fname, lname, house_no, street, city, state, phone, email)
		VALUES(:new_customer);
	EXEC SQL COMMIT;

	printf("New customer successfully added\n");
}

// Query 2
// Completed
void delete_employee(){
	int e_no;
	
	printf("Enter employee_no >> ");
	scanf("%d", &e_no);

	EXEC SQL DELETE FROM Employees
		WHERE employee_no = :e_no;
	EXEC SQL COMMIT;

	printf("Employee successfully deleted\n");	
}

// Query 3
// Incomplete, gets stuck in loop
void update_order_description(){
	struct note *note_recv;
	int o_no;
	int n_no;
	char new_desc[40];	

	if((note_recv = (struct note *) malloc(sizeof(struct note))) == 0){
		fprintf(stderr, "Memory allocation error\n");
                exit(EXIT_FAILURE);
	}

	printf("Enter order_no >> ");
	scanf("%d", &o_no);

	EXEC SQL DECLARE order_desc CURSOR FOR
		SELECT * 
			FROM Notes
			WHERE order_no = :o_no;

	EXEC SQL OPEN order_desc;

	// Table header
	printf("note_no   description\n");
	printf("--------  ---------------------\n");

	EXEC SQL WHENEVER NOT FOUND DO break;

	while(1){
		EXEC SQL FETCH order_desc INTO :note_recv; 
		printf("%d  %s\n",
			note_recv -> note_no,
			note_recv -> description);
	}
	
	EXEC SQL CLOSE order_desc;

	// Gets stuck in a loop

	printf("Enter note_no >> ");
	scanf("%d", &n_no);
	printf("Enter new desciption >> ");
	scanf("%d", new_desc);

	EXEC SQL WHENEVER NOT FOUND continue;

		EXEC SQL UPDATE Notes
			SET description = :new_desc 
			WHERE note_no = :n_no
			AND order_no = :o_no;
		EXEC SQL COMMIT;

	printf("Note successfully updated\n");
}

// Query 4
// Completed
void show_orders_by_vehicle(){
	struct order *order_recv;
	char v[20];
	
	if((order_recv = (struct order *) malloc(sizeof(struct order))) == 0){
		fprintf(stderr, "Memory allocation error\n");
		exit(EXIT_FAILURE);
	} 

	printf("Enter vin >> ");
	scanf("%s", v);
	
	EXEC SQL DECLARE vehicle_orders CURSOR FOR
		SELECT * 
			FROM Orders
			WHERE vin = :v
			ORDER BY start_date;

	EXEC SQL OPEN vehicle_orders;

	// Table header
	printf("order_no              start_date  end_date  \n");
	printf("--------------------  ----------  ----------\n");

	EXEC SQL WHENEVER NOT FOUND DO break;

	while(1){
		EXEC SQL FETCH vehicle_orders INTO :order_recv;
		printf("%-20d  %-10d  %-10d\n",
			order_recv -> order_no,
			order_recv -> start_date,
			order_recv -> end_date);
	}
	
	EXEC SQL CLOSE vehicle_orders;
}

// Query 5
// Completed
void show_line_items(){
	struct item *item_recv;
	int o_no;

	if((item_recv = (struct item *) malloc(sizeof(struct item))) == 0){
		fprintf(stderr, "Memory allocation error\n");
		exit(EXIT_FAILURE);
	}

	printf("Enter order_no >> ");
	scanf("%d", &o_no);

	EXEC SQL DECLARE line_items CURSOR FOR
		SELECT * 
			FROM Items
			WHERE order_no = (
				SELECT order_no
				FROM Invoices
				WHERE order_no = :o_no);

	EXEC SQL OPEN line_items;	

	EXEC SQL WHENEVER NOT FOUND DO break;

	/* Table header */
	printf("item_no         procedure_no  description                 cost\n");
	printf("--------------  ------------  --------------------------  ----------\n");

	while(1){
		EXEC SQL FETCH line_items INTO :item_recv;
		printf("%-13d  %-13d  %-20s  %-10d\n", 
			item_recv -> item_no,
			item_recv -> procedure_no,
			item_recv -> description,
			item_recv -> cost);
	}
	
	EXEC SQL CLOSE line_items;
}


// Query 6
// Completed
void show_orders_by_date(){
	struct order *order_recv;

	if((order_recv = (struct order *) malloc(sizeof(struct order))) == 0){
                fprintf(stderr, "Memory allocation error\n");
                exit(EXIT_FAILURE);
        }


	EXEC SQL DECLARE orders CURSOR FOR
		SELECT * 
			FROM Orders
			WHERE start_date >= 20050601 
			AND end_date <= 20051231
			ORDER BY order_no;

	EXEC SQL OPEN orders;

	// Table header
        printf("order_no  start_date   end_date  vin                   employee_no\n");
	printf("--------  ----------   --------  --------------------  -----------\n");

	EXEC SQL WHENEVER NOT FOUND DO break;
	
	while(1){
		EXEC SQL FETCH orders INTO :order_recv;
		printf("%-8d  %-10d  %-8d  %-20s  %-11d\n", 
			order_recv -> order_no,
			order_recv -> start_date,
			order_recv -> end_date,
			order_recv -> vin,
			order_recv -> employee_no);
	}

	EXEC SQL CLOSE orders;
}

// Query 7
// Completed
void items_by_procedure(){
	struct item *item_recv;
	int o_no;
	int p_no;

	if((item_recv = (struct item *) malloc(sizeof(struct item))) == 0){
		fprintf(stderr, "Memory allocation error\n");
		exit(EXIT_FAILURE);
	}

	printf("Enter order_no >> ");
	scanf("%d", &o_no);
	printf("Enter procedure_no >> ");
	scanf("%d", &p_no);
	
	EXEC SQL DECLARE items CURSOR FOR
		SELECT * 
			FROM Items
			WHERE procedure_no = :p_no
			AND order_no = :o_no;

	EXEC SQL OPEN items;

	// Table header 
	printf("item_no   description           cost\n");
	printf("--------  --------------------  --------\n");

	EXEC SQL WHENEVER NOT FOUND DO break;

	while(1){
		EXEC SQL FETCH items INTO :item_recv;
		printf("%-8d  %-20s  %-8d\n",
			item_recv -> item_no,
			item_recv -> description,
			item_recv -> cost);		
	}

	EXEC SQL CLOSE items;
}

// Query 8
// Completed
void all_procedures_by_order(){
	struct procedure *procedure_recv;
	int o_no;

	if((procedure_recv = (struct procedure *) malloc(sizeof(struct procedure))) == 0){
		fprintf(stderr, "Memory allocation error\n");
		exit(EXIT_FAILURE);
	}

	EXEC SQL DECLARE procedures CURSOR FOR
		SELECT *
			FROM procedures
			ORDER BY order_no DESC;

	EXEC SQL OPEN procedures;

	// Table header
	printf("order_no  procedure_no  description                cost    \n");
	printf("--------  ------------  -------------------------  --------\n");

	EXEC SQL WHENEVER NOT FOUND DO break;
	
	while(1){
		EXEC SQL FETCH procedures INTO :procedure_recv;
		printf("%-8d  %-12d  %-25s  %-8d\n",
			procedure_recv -> order_no,
			procedure_recv -> procedure_no,
			procedure_recv -> description,
			procedure_recv -> cost);	
	}

	EXEC SQL CLOSE procedures;
}

// Query 9
// Incomplete, part missing
void employee_invoices(){
	struct employee *employee_recv;
	int num_e;
	int num_i;
	int avg_i_per_e;

	if((employee_recv = (struct employee *) malloc(sizeof(struct employee))) == 0){
		fprintf(stderr, "Memory allocation error\n");
		exit(EXIT_FAILURE);
	}

	EXEC SQL DECLARE employee_num CURSOR FOR
		SELECT count(DISTINCT employee_no)
			FROM Invoices;
	
	EXEC SQL OPEN employee_num;

	while(1){
		EXEC SQL FETCH employee_num INTO :num_e;
	}

	EXEC SQL CLOSE employee_num;

	EXEC SQL DECLARE invoice_num CURSOR FOR
		SELECT count(invoice_no)
			FROM Invoices;

	EXEC SQL OPEN invoice_num;

	while(1){
		EXEC SQL FETCH invoice_num INTO :num_i;
	}

	EXEC SQL CLOSE invoice_num;

	avg_i_per_e = num_i / num_e;
	printf("Num employees = %d, num invoices = %d, average = %d\n", num_e, num_i, avg_i_per_e);

	EXEC SQL DECLARE above_average CURSOR FOR
		SELECT employee_no
			FROM Invoices
			WHERE :avg_i_per_e < (SELECT count(employee_no)
					FROM Invoices); 
	
	EXEC SQL OPEN above_average;
	
	// Table header
	printf("fname            lname            num_invoices\n");
	printf("---------------  ---------------  --------\n");

	while(1){
		EXEC SQL FETCH above_average INTO :employee_recv;
	/*	printf("%-15s  %-15s\n", 
			employee_recv -> fname,
			employee_recv -> lname);	*/	
	}

	EXEC SQL CLOSE above_average;
}

// Query 10
// Completed
void invoice_details(){
	struct invoice *invoice_recv;
	struct vehicle *vehicle_recv;
	int i_no;

	if((invoice_recv = (struct invoice *) malloc(sizeof(struct invoice))) == 0){
		fprintf(stderr, "Memory allocation error\n");
		exit(EXIT_FAILURE);
	}

	if((vehicle_recv = (struct vehicle *) malloc(sizeof(struct vehicle))) == 0){
		fprintf(stderr, "Memory allocation error\n");
		exit(EXIT_FAILURE);
	}

	printf("Enter invoice_no >> ");
	scanf("%d", &i_no);	

	EXEC SQL DECLARE invoices CURSOR FOR
		SELECT * 
			FROM Invoices
			WHERE invoice_no = :i_no;

	EXEC SQL OPEN invoices;

	EXEC SQL WHENEVER NOT FOUND DO break;

	while(1){
		EXEC SQL FETCH invoices INTO :invoice_recv;	
	}

	EXEC SQL CLOSE invoices;

	EXEC SQL DECLARE vehicles CURSOR FOR
		SELECT *
			FROM Vehicles
			WHERE vin = (SELECT vin
					FROM Invoices
					WHERE invoice_no = :i_no);

	EXEC SQL OPEN vehicles;
	
	EXEC SQL WHENEVER NOT FOUND DO break;

	while(1){
		EXEC SQL FETCH vehicles INTO :vehicle_recv;
	}
	
	EXEC SQL CLOSE vehicles;

	// Table header
	printf("customer_no  status                year  make            model            odometer_in  odometer_out  vin                 \n");
	printf("-----------  --------------------  ----  --------------- ---------------  -----------  ------------  --------------------\n");

	printf("%-11d  %-20s  %-4d  %-15s  %-15s  %-11d  %-12d  %s\n",
		invoice_recv -> customer_no,
		invoice_recv -> status,
		vehicle_recv -> year,
		vehicle_recv -> make,
		vehicle_recv -> model,
		invoice_recv -> odometer_in,
		invoice_recv -> odometer_out,
		invoice_recv -> vin);
}

void main(){ 
	/* Connect to Oracle */ 
	strcpy(username, "abk89"); 
	strcpy(password, "~Ece3038");
	
	EXEC SQL WHENEVER SQLERROR DO sql_error("Oracle error: ");
 
	EXEC SQL CONNECT :username IDENTIFIED BY :password; 
	printf("\nConnected to Oracle as user: %s\n", username); 
 
	main_menu();

	while(1){
		int inp;
		printf(">> ");
		scanf("%d", &inp);

		switch(inp){
			case 0:
				printf("Program finished!\n");
				EXEC SQL COMMIT WORK RELEASE;
				exit(EXIT_SUCCESS);

			case 1:
				add_customer();
				break;
		
			case 2:
				delete_employee();
				break;

			case 3: 
				update_order_description();
				break;

			case 4:
				show_orders_by_vehicle();
				break;

			case 5:
				show_line_items();				
				break;

			case 6:
				show_orders_by_date();
				break;

			case 7:
				items_by_procedure();
				break;
			
			case 8:
				all_procedures_by_order();
				break;
		
			case 9: 
				employee_invoices();
				break;

			case 10:
				invoice_details();
				break;

			default:	
				printf("Invalid input \"%d\", please try again\n", inp);
				break;
		}
	}
}
