#include <stdio.h>
#include <string.h>
#include <sqlca.h>
#include <stdlib.h>
#include <sqlda.h>
#include <sqlcpr.h>

#define STR_LEN 25 
 
typedef char asciiz[STR_LEN]; 

EXEC SQL TYPE asciiz IS CHARZ(STR_LEN) REFERENCE; 

asciiz username; 
asciiz password; 

struct hotel_details {
	// For Option 1
	int no;
	asciiz name;
	asciiz city;
}; 

void sql_error(char * msg){ 
	char err_msg[512];
	size_t buf_len, msg_len;

	EXEC SQL WHENEVER SQLERROR CONTINUE;

	printf("\n%s\n", msg);

	buf_len = sizeof(err_msg);
	sqlglm(err_msg, &buf_len, &msg_len);
	printf("%.*s\n", msg_len, err_msg);

	EXEC SQL ROLLBACK RELEASE;
	exit(EXIT_FAILURE);
} 

void main(){ 
	struct hotel_details *hotel_recv;

	if((hotel_recv = (struct hotel_details *) malloc(sizeof(struct hotel_details))) == 0){
		fprintf(stderr, "Memory allocation error.\n");
		exit(EXIT_FAILURE);
	}
	
 
	/* Connect to ORACLE. */ 
	strcpy(username, "abk89"); 
	strcpy(password, "~Ece3038"); 
 
	EXEC SQL WHENEVER SQLERROR DO sql_error("ORACLE error--");
 
	EXEC SQL CONNECT :username IDENTIFIED BY :password; 
	printf("\nConnected to ORACLE as user: %s\n", username); 

	printf("Select an option to query the database:\n");
	printf("  0. Exit the program\n");
	printf("  1. Search all hotels in a certain city\n");
	printf("  2. List roomNo, type, and price for the Biltmore Hotel\n");
	printf("  3. List guestNo and guestName of guests who live in Miami (sorted by name)\n");
	printf("  4. list the number of rooms in each hotel\n");

	while(1){
		int inp;
		char inp_city[100];
		printf(">> ");
		scanf("%d", &inp);

		switch(inp){
			case 0:
				printf("Program finished!\n");
				exit(EXIT_SUCCESS);
		
			case 1:
				printf("Option 1 selected\n");
				printf("Enter a city to search:\n");
				printf(">> ");
				scanf("%s", inp_city);
				printf("You entered: %s\n", inp_city);
				
				EXEC SQL DECLARE hotels CURSOR FOR
					SELECT *
						FROM Hotel
						WHERE city='Seattle'; // Need to change to take inp_city
				
				EXEC SQL OPEN hotels;

				printf("No    Name                       City\n");
				printf("----  -------------------------  ---------------\n");

				EXEC SQL WHENEVER NOT FOUND DO break;

				while(1){
					EXEC SQL FETCH hotels INTO :hotel_recv;
					printf("%-4d  %-25s  %-15s\n", 
						hotel_recv -> no, 
						hotel_recv -> name, 
						hotel_recv -> city);
				}

				EXEC SQL CLOSE hotels;
				EXEC SQL COMMIT WORK RELEASE;
	
				break;
		
			case 2:
				printf("Option 2 selected\n");

				break;

			case 3: 
				printf("Option 3 selected\n");

				break;

			case 4:
				printf("Option 4 selected\n");

				break;

			default:	
				printf("Invalid input \"%d\", please try again\n", inp);

				break;
		}
	}
}
