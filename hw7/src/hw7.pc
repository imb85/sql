#include <stdio.h>
#include <string.h>
#include <sqlca.h>
#include <stdlib.h>
#include <sqlda.h>
#include <sqlcpr.h>

#define STR_LEN 25 
 
typedef char asciiz[STR_LEN]; 

EXEC SQL TYPE asciiz IS CHARZ(STR_LEN) REFERENCE; 

asciiz username; 
asciiz password; 

struct hotel_details {
	int no;
	asciiz name;
	asciiz city;
}; 

struct biltmore_hotel_details {
	int no;
	asciiz type;
	float price;
};

struct guest_details {
	int no;
	asciiz name;
	asciiz addr;
};

struct room_count {
	int hotel_no;
	int room_total;
};

void sql_error(char * msg){ 
	char err_msg[512];
	size_t buf_len, msg_len;

	EXEC SQL WHENEVER SQLERROR CONTINUE;

	printf("\n%s\n", msg);

	buf_len = sizeof(err_msg);
	sqlglm(err_msg, &buf_len, &msg_len);
	printf("%.*s\n", msg_len, err_msg);

	EXEC SQL ROLLBACK RELEASE;
	exit(EXIT_FAILURE);
} 

void main_menu(){
	printf("Select an option to query the database:\n");
	printf("0. Exit the program\n");
	printf("1. Search all hotels in a certain city\n");
	printf("2. List roomNo, type, and price for the Biltmore Hotel\n");
	printf("3. List guestNo and guestName of guests who live in Miami (sorted by name)\n");
	printf("4. list the number of rooms in each hotel\n");
}

void city_hotel_details(){
	char inp_city[100];
	struct hotel_details *hotel_recv;

	if((hotel_recv = (struct hotel_details *) malloc(sizeof(struct hotel_details))) == 0){
		fprintf(stderr, "Memory allocation error.\n");
		exit(EXIT_FAILURE);
	}

	printf("Enter a city to search:\n");
	printf(">> ");
	scanf("%s", inp_city);

	EXEC SQL DECLARE hotels CURSOR FOR
		SELECT *
			FROM Hotel
			WHERE city=:inp_city;

	EXEC SQL OPEN hotels;

	/* Table header */
	printf("No    Name                       City\n");
	printf("----  -------------------------  ---------------\n");

	EXEC SQL WHENEVER NOT FOUND DO break;

	while(1){
		EXEC SQL FETCH hotels INTO :hotel_recv;
		printf("%-4d  %-25s  %-15s\n", 
			hotel_recv -> no, 		
			hotel_recv -> name, 
			hotel_recv -> city);
	}

	EXEC SQL CLOSE hotels;
	EXEC SQL COMMIT WORK RELEASE;
}

void biltmore_hotel_details(){
	struct biltmore_hotel_details *room_recv;
	
	if((room_recv = (struct biltmore_hotel_details *) malloc(sizeof(struct biltmore_hotel_details))) == 0){
		fprintf(stderr, "Memory allocation error.\n");
		exit(EXIT_FAILURE);
	}
	
	EXEC SQL DECLARE rooms CURSOR FOR
		SELECT roomNo, roomType, price
			FROM Room
			WHERE hotelNo=(
				SELECT hotelNo
				FROM Hotel
				WHERE hotelName='Biltmore Hotel');
			
	EXEC SQL OPEN rooms;

	/* Table header */
	printf("No    Type                  Price\n");
	printf("----  --------------------  -------\n");

	EXEC SQL WHENEVER NOT FOUND DO break;

	while(1){
		EXEC SQL FETCH rooms INTO :room_recv;
		printf("%-4d  %-20s  %-4.2f\n", 
			room_recv -> no,
			room_recv -> type,
			room_recv -> price);
	}

	EXEC SQL CLOSE rooms;
	EXEC SQL COMMIT WORK RELEASE;
}

void miami_guests(){
	struct guest_details *guest_recv;
	
	if((guest_recv = (struct guest_details *) malloc(sizeof(struct guest_details))) == 0){
		fprintf(stderr, "Memory allocation error\n");
		exit(EXIT_FAILURE);
	}

	EXEC SQL DECLARE guests CURSOR FOR
		SELECT guestNo, guestName
			FROM Guest
			WHERE guestAddress LIKE '%Miami%'
			ORDER BY guestName;

	EXEC SQL OPEN guests;

	/* Table header */
	printf("No    Name\n");
	printf("----  -------------------------------\n");

	EXEC SQL WHENEVER NOT FOUND DO break;

	while(1){
		EXEC SQL FETCH guests INTO :guest_recv;
		printf("%-4d  %-20s\n",
			guest_recv -> no,
			guest_recv -> name);
	}

	EXEC SQL CLOSE guests;
	EXEC SQL COMMIT WORK RELEASE;
}

void hotel_room_count(){
	struct room_count *room_no_recv;

	if((room_no_recv = (struct room_count *) malloc(sizeof(struct room_count))) == 0){
		fprintf(stderr, "Memory allocation error\n");
		exit(EXIT_FAILURE);
	}

	EXEC SQL DECLARE room_total CURSOR FOR
		SELECT hotelNo, COUNT(roomNo) AS count
			FROM Room
			GROUP BY hotelNo
			ORDER BY hotelNo;

	EXEC SQL OPEN room_total;

	/* Table header */
	printf("Hotel No  Room Total\n");
	printf("--------  ----------\n");

	while(1){
		EXEC SQL FETCH room_total INTO :room_no_recv;
		printf("%-8d  %-10d\n", 
			room_no_recv -> hotel_no,
			room_no_recv -> room_total);
	}

	EXEC SQL CLOSE room_total;
	EXEC SQL COMMIT WORK RELEASE;
}

void main(){ 
	/* Connect to Oracle */ 
	strcpy(username, "abk89"); 
	strcpy(password, "~Ece3038"); 
 
	EXEC SQL WHENEVER SQLERROR DO sql_error("Oracle error: ");
 
	EXEC SQL CONNECT :username IDENTIFIED BY :password; 
	printf("\nConnected to Oracle as %s\n", username); 

	main_menu();

	while(1){
		int inp;
		printf(">> ");
		scanf("%d", &inp);

		switch(inp){
			case 0:
				printf("Program finished!\n");
				exit(EXIT_SUCCESS);
		
			case 1:
				city_hotel_details();
				break;
		
			case 2:
				biltmore_hotel_details();
				break;

			case 3: 
				miami_guests();
				break;

			case 4:
				hotel_room_count();
				break;

			default:	
				printf("Invalid input \"%d\", please try again\n", inp);
				break;
		}
	}
}
